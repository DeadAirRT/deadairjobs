<?xml version="1.0" encoding="iso-8859-1" ?>
<aiscript name="trade.find.free.daai" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
	<params>
		<param name="warebasket"/>
		<param name="range" comment="space to base the search on."/>
		<param name="buyspaces" default="[]" comment="list of allowed spaces to buy (sorted by closest distance)"/>
		<param name="sellspaces" default="[]" comment="list of allowed spaces to sell (sorted by closest distance)"/>
		<param name="sellcurrentcargo" default="not this.isplayerowned" comment="allow this to sell current cargo (default false for player faction). NB: this should stay false for player-owned ships. they are allowed to sell wares in their cargo that are also in their warebasket and leave the other wares alone."/>
		<param name="debugchance" default="0"/>
		<param name="debugchance2" default="0"/>
	</params>
	<init>
		<set_command_action commandaction="commandaction.searchingtrades"/>
		<include_interrupt_actions ref="GetBlacklistgroup"/>
	</init>
	<attention min="unknown">
		<actions>
			<!-- set up initial state for trade runs -->
			<set_value name="$currentcargo" exact="this.ship.cargo.list"/>
			<set_value name="$transporttypes" exact="[waretransport.container, waretransport.solid, waretransport.liquid]"/>
			<set_value name="$freevolume" exact="table[]"/>
			<set_value name="$minvolume" exact="table[]"/>
			<do_if value="this.ship.cargo.free.universal gt 0">
				<set_value name="$useuniversalstorage"/>
				<set_value name="$freevolume.{-1}" exact="this.ship.cargo.free.universal"/>
				<set_value name="$minvolume.{-1}" exact="[$freevolume.{-1}, this.ship.cargo.capacity.universal / 20].min"/>
			</do_if>
			<do_else>
				<set_value name="$freevolume.{waretransport.container}" exact="this.ship.cargo.free.container"/>
				<set_value name="$minvolume.{waretransport.container}" exact="[$freevolume.{waretransport.container}, this.ship.cargo.capacity.container / 20].min"/>
				<set_value name="$freevolume.{waretransport.solid}" exact="this.ship.cargo.free.solid"/>
				<set_value name="$minvolume.{waretransport.solid}" exact="[$freevolume.{waretransport.solid}, this.ship.cargo.capacity.solid / 20].min"/>
				<set_value name="$freevolume.{waretransport.liquid}" exact="this.ship.cargo.free.liquid"/>
				<set_value name="$minvolume.{waretransport.liquid}" exact="[$freevolume.{waretransport.liquid}, this.ship.cargo.capacity.liquid / 20].min"/>
			</do_else>
			<do_if value="$useuniversalstorage?">
				<set_value name="$totalminvolume" exact="$minvolume.{-1}"/>
				<set_value name="$totalfreevolume" exact="$freevolume.{-1}"/>
			</do_if>
			<do_else>
				<set_value name="$totalminvolume" exact="0"/>
				<set_value name="$totalfreevolume" exact="0"/>
				<do_all exact="$transporttypes.count" counter="$t">
					<set_value name="$totalminvolume" exact="$minvolume.{$transporttypes.{$t}}" operation="add"/>
					<set_value name="$totalfreevolume" exact="$freevolume.{$transporttypes.{$t}}" operation="add"/>
				</do_all>
			</do_else>
			<set_value name="$tradefails" exact="0"/>
			<set_value name="$bestbuyoffers" exact="table[]"/>
			<set_value name="$bestselloffers" exact="table[]"/>
			<set_value name="$table_buyoffers" exact="table[]"/>
			<set_value name="$table_selloffers" exact="table[]"/>
			<label name="start"/>
			<set_value name="$buyoffer" exact="null"/>
			<set_value name="$selloffer" exact="null"/>
			<!-- SELL OFFERS (I buy): 
        1 - Start on the first on $buyspaces
        2 - Remove it
        3 - Repeat
      -->
			<label name="find_sell_offers"/>
			<set_value name="$selloffers" exact="[]"/>
			<set_value name="$filteredwarebasket" exact="[]"/>
			<set_value name="$baskettransporttypes" exact="[]"/>
			<set_value name="$minsellvolume" exact="-1"/>
			<!-- if we have not found a good trade run after some attempts, relax the rules -->
			<do_if value="$tradefails" min="1">
				<do_if value="$useuniversalstorage?">
					<do_if value="$minvolume.{-1}">
						<set_value name="$minvolume.{-1}" exact="$minvolume.{-1} / 5"/>
						<set_value name="$totalminvolume" exact="$minvolume.{-1} "/>
					</do_if>
					<!--Update the free volume as something may have changed-->
					<set_value name="$freevolume.{-1}" exact="this.ship.cargo.free.universal"/>
					<set_value name="$totalfreevolume" exact="$freevolume.{-1}"/>
				</do_if>
				<do_else>
					<set_value name="$totalminvolume" exact="0"/>
					<set_value name="$totalfreevolume" exact="0"/>
					<do_all exact="$transporttypes.count" counter="$t">
						<do_if value="$minvolume.{$transporttypes.{$t}}">
							<set_value name="$minvolume.{$transporttypes.{$t}}" exact="$minvolume.{$transporttypes.{$t}} / 5"/>
							<set_value name="$totalminvolume" exact="$minvolume.{$transporttypes.{$t}}" operation="add"/>
						</do_if>
						<!--Update the free volume as something may have changed-->
						<do_if value="$transporttypes.{$t} == waretransport.container">
							<set_value name="$freevolume.{$transporttypes.{$t}}" exact="this.ship.cargo.free.container"/>
						</do_if>
						<do_elseif value="$transporttypes.{$t} == waretransport.solid">
							<set_value name="$freevolume.{$transporttypes.{$t}}" exact="this.ship.cargo.free.solid"/>
						</do_elseif>
						<do_elseif value="$transporttypes.{$t} == waretransport.liquid">
							<set_value name="$freevolume.{$transporttypes.{$t}}" exact="this.ship.cargo.free.liquid"/>
						</do_elseif>
						<set_value name="$totalfreevolume" exact="$freevolume.{$transporttypes.{$t}}" operation="add"/>
					</do_all>
				</do_else>
				<do_if value="$totalminvolume lt 1">
					<resume label="finish"/>
				</do_if>
				<set_value name="$skippricecheck"/>
				<remove_value name="$totalminvolume"/>
				<!-- Reset the buyspace index, tradefails counter and the best offer lists -->
				<set_value name="$indexbuyspaces" exact="0"/>
				<set_value name="$tradefails" exact="0"/>
				<set_value name="$bestbuyoffers" exact="table[]"/>
				<set_value name="$bestselloffers" exact="table[]"/>
				<set_value name="$table_buyoffers" exact="table[]"/>
				<set_value name="$table_selloffers" exact="table[]"/>
			</do_if>
			<set_value name="$cargoforsale" exact="[]"/>
			<set_value name="$cargoforsale" exact="$currentcargo.clone"/>
			<do_if value="$cargoforsale.count">
				<!--Has current cargo to sell. Skip looking for sell offers-->
				<set_value name="$filteredwarebasket" exact="$cargoforsale"/>
				<set_value name="$sellcurrentcargo_internal"/>
				<!--$minsellvolume is used when looking for buy offers to filter out offer amounts which are too low to care about. At zero, anything is considered as we want to clear our cargo ASAP-->
				<set_value name="$minsellvolume" exact="0"/>
			</do_if>
			<do_elseif value="$totalfreevolume lt 1">
			</do_elseif>
			<do_elseif value="$buyspaces.count">
				<!--There are filtered wares AND spaces to buy-->
				<!--Prefilter wares there are no space for-->
				<do_all exact="$warebasket.count" counter="$i">
					<!-- also check that the we can carry it (max > 0) -->
					<set_value name="$tempware" exact="$warebasket.{$i}"/>
					<do_if value="this.ship.cargo.{$tempware}.max">
						<do_if value="($useuniversalstorage? and $minvolume.{-1} gt 0) or $minvolume.{$tempware.waretransport} gt 0">
							<do_if value="this.ship.cargo.{$tempware}.free gt (this.ship.cargo.{$tempware}.max / 10)">
								<append_to_list name="$filteredwarebasket" exact="$tempware"/>
								<do_if value="$baskettransporttypes.indexof.{$tempware.waretransport} == 0">
									<append_to_list name="$baskettransporttypes" exact="$tempware.waretransport"/>
								</do_if>
							</do_if>
						</do_if>
					</do_if>
				</do_all>
				<remove_value name="$tempware"/>
				<do_if value="$filteredwarebasket.count">
					<do_if value="$useuniversalstorage? and $minvolume.{-1} gt 0">
						<set_value name="$practicalminvolume" exact="$minvolume.{-1}"/>
						<set_value name="$practicalfreevolume" exact="$freevolume.{-1}"/>
					</do_if>
					<do_elseif value="$baskettransporttypes.count == 1">
						<!--basket uses a single transport type-->
						<set_value name="$practicalminvolume" exact="$minvolume.{$baskettransporttypes.{1}}"/>
						<set_value name="$practicalfreevolume" exact="$freevolume.{$baskettransporttypes.{1}}"/>
					</do_elseif>
					<do_elseif value="$baskettransporttypes.count gt 1">
						<!--basket uses multiple transport types-->
						<set_value name="$practicalminvolume" exact="1000000000"/>
						<set_value name="$practicalfreevolume" exact="0"/>
						<do_all exact="$baskettransporttypes.count" counter="$t">
							<set_value name="$practicalminvolume" exact="[$practicalminvolume, $minvolume.{$baskettransporttypes.{$t}}].min"/>
							<set_value name="$practicalfreevolume" exact="[$practicalfreevolume, $freevolume.{$baskettransporttypes.{$t}}].max"/>
						</do_all>
					</do_elseif>
					<!-- Go over all the (sorted) buy spaces -->
					<do_all exact="$buyspaces.count" counter="$i">
						<!-- optimization -->
						<do_if value="$i le @$indexbuyspaces">
							<continue/>
						</do_if>
						<shuffle_list list="$filteredwarebasket"/>
						<find_sell_offer tradepartner="this.ship" space="$buyspaces.{$i}" result="$selloffers" wares="$filteredwarebasket" multiple="true">
							<match_seller tradesknownto="this.owner" owner="this.owner">
								<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.ship"/>
							</match_seller>
							<totalvolume min="$practicalminvolume"/>
							<mintotalvolume max="$practicalfreevolume"/>
						</find_sell_offer>
						<find_sell_offer tradepartner="this.ship" space="$buyspaces.{$i}" result="$selloffers" wares="$filteredwarebasket" multiple="true" chance="(@$selloffers.count le 0) * 100">
							<match_seller tradesknownto="this.owner" owner="if $onlyplayerclients then faction.player else null" negateownerfilter="not $onlyplayerclients">
								<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.ship"/>
							</match_seller>
							<totalvolume min="$practicalminvolume"/>
							<mintotalvolume max="$practicalfreevolume"/>
						</find_sell_offer>
						<do_if value="not $useuniversalstorage? and $baskettransporttypes.count gt 1">
							<!--as we are dealing with multiple transport types and freevolume for one type could be higher than for another
                    remove any offers for wares which have a minvolume higher than $freevolume of the corresponding type-->
							<do_all exact="$selloffers.count" counter="$i" reverse="true">
								<do_if value="$selloffers.{$i}.minvolume gt $freevolume.{$selloffers.{$i}.ware.waretransport}">
									<remove_value name="$selloffers.{$i}"/>
								</do_if>
							</do_all>
						</do_if>
						<do_all exact="$selloffers.count" counter="$j" reverse="true">
							<do_if value="$selloffers.{$j}.owner.zone.policefaction and $selloffers.{$j}.ware.illegalto.{$selloffers.{$j}.owner.zone.policefaction}.{this.owner} and ($selloffers.{$j}.owner.zone.policefaction != this.owner)">
								<remove_value name="$selloffers.{$j}"/>
							</do_if>
						</do_all>
						<!-- Sell offers found -->
						<do_if value="$selloffers.count">
							<!-- shuffle list so that offers with the same tradevalue are still in a random order and not in the consistent order that the stations were found in -->
							<shuffle_list list="$selloffers"/>
							<!-- NB: if we get in here at all, we have found sell offers in this space that meet our criteria and are currently interested in choosing between them. spaces are sorted by gate distance so we implicitly prefer close trades as long as they meet criteria. -->
							<!-- Sort them by price [cheap to expensive] -->
							<do_all exact="$selloffers.count" counter="$j">
								<!-- BUYING: tradevalue = amount * -(relprice - 2) -->
								<set_value name="$tradevalue" exact="[$selloffers.{$j}.offeramount.{this.assignedcontrolled}, this.ship.cargo.{$selloffers.{$j}.ware}.free].min * $selloffers.{$j}.ware.volume * -($selloffers.{$j}.relativeprice - 2)"/>
								<do_if value="not $table_selloffers.{$tradevalue}?">
									<set_value name="$table_selloffers.{$tradevalue}" exact="$selloffers.{$j}"/>
								</do_if>
								<remove_value name="$tradevalue"/>
							</do_all>
							<set_value name="$list_sortedsellofferkeys" exact="$table_selloffers.keys.list"/>
							<set_value name="$tempoffer" exact="$table_selloffers.{$list_sortedsellofferkeys.max}"/>
							<!-- Now filter the wares based on the sell offers -->
							<clear_list list="$filteredwarebasket"/>
							<!--List all wares of the found trades so we can search for buy offers in our sell range. This prevents the ship buying wares it can't sell, higher value is better-->
							<do_all exact="$list_sortedsellofferkeys.count" counter="$Counter" reverse="true">
								<do_if value="$table_selloffers.{$list_sortedsellofferkeys.{$Counter}}.available">
									<set_value name="$tempoffer" exact="$table_selloffers.{$list_sortedsellofferkeys.{$Counter}}"/>
									<set_value name="$tempware" exact="$tempoffer.ware"/>
									<!-- Keep the best sell offers per ware on this space -->
									<!-- NB: $filteredwarebasket is cleared once per space. -->
									<do_if value="not $filteredwarebasket.indexof.{$tempware}">
										<append_to_list name="$filteredwarebasket" exact="$tempware"/>
										<!-- If it's not already on $bestselloffers table or the new sell offer is cheaper (I pay less money when I buy) -->
										<!-- NB: $bestvalue comes into play IF a better offer for a bestselloffer ware is found in a different space. this happens if no buy offers are found to match the best sell offers found thus far. -->
										<set_value name="$bestvalue" exact="0"/>
										<do_if value="@$bestselloffers.{$tempware}.available">
											<set_value name="$bestvalue" exact="[$bestselloffers.{$tempware}.offeramount.{this.assignedcontrolled}, this.ship.cargo.{$tempware}.free].min * $tempware.volume * -($bestselloffers.{$tempware}.relativeprice - 2)"/>
										</do_if>
										<do_if value="$list_sortedsellofferkeys.{$Counter} gt $bestvalue">
											<set_value name="$bestselloffers.{$tempware}" exact="$tempoffer"/>
											<!--Lower the min volume amount when looking for buy offers to allow more suitable trades to be considered-->
											<do_if value="$minsellvolume lt 0 or $tempoffer.minvolume lt $minsellvolume">
												<set_value name="$minsellvolume" exact="$tempoffer.minvolume"/>
											</do_if>
										</do_if>
									</do_if>
								</do_if>
								<do_else>
									<remove_value name="$table_selloffers.{$list_sortedsellofferkeys.{$Counter}}"/>
									<remove_value name="$list_sortedsellofferkeys.{$Counter}"/>
								</do_else>
							</do_all>
							<!-- Index of the buyspace with sell offers -->
							<set_value name="$indexbuyspaces" exact="$i"/>
							<!-- random chance to keep searching the next buyspace even if we found something, increasingly more likely the further we are through the buyspaces -->
							<set_value name="$breakchance" exact="[100, ($i * 100) / $buyspaces.count, 100 - this.assignedcontrolled.combinedskill].min"/>
							<break chance="$breakchance"/>
						</do_if>
						<wait min="150ms" max="1s" comment="Avoid performance peaks with find functions"/>
					</do_all>
					<remove_value name="$breakchance"/>
					<remove_value name="$practicalfreevolume"/>
					<remove_value name="$tempoffer"/>
					<remove_value name="$tempware"/>
					<remove_value name="$bestvalue"/>
					<!-- If there are no sell offers, just clear the ware list -->
					<do_if value="not $selloffers.count">
						<clear_list list="$filteredwarebasket"/>
					</do_if>
				</do_if>
			</do_elseif>
			<do_else>
				<clear_list list="$filteredwarebasket"/>
			</do_else>
			<!-- No wares: either nothing to search for, no offers found, or no cargo-->
			<do_if value="not $filteredwarebasket.count">
				<set_value name="$sellcurrentcargo_internal" exact="true"/>
				<set_value name="$tradefails" operation="add"/>
				<resume label="fail"/>
			</do_if>
			<do_else>
				<remove_value name="$baskettransporttypes"/>
			</do_else>
			<!-- BUY OFFERS -->
			<!-- find_buy_offers (I sell): either I sell (future) the things I want to buy, or I sell my current cargo -->
			<label name="find_buy_offers"/>
			<!--Check for buy offers of spaces within the $sellspaces -->
			<do_all exact="$sellspaces.count" counter="$i">
				<shuffle_list list="$filteredwarebasket"/>
				<find_buy_offer tradepartner="this.ship" wares="$filteredwarebasket" space="$sellspaces.{$i}" result="$buyoffers" multiple="true">
					<offervolume min="if $sellcurrentcargo_internal? then 1 else (if $practicalminvolume? then $practicalminvolume else 1)" tradepartner="this.ship"/>
					<match_buyer tradesknownto="this.owner" owner="this.owner">
						<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.ship"/>
					</match_buyer>
				</find_buy_offer>
				<find_buy_offer tradepartner="this.ship" wares="$filteredwarebasket" space="$sellspaces.{$i}" result="$buyoffers" multiple="true" chance="(@$buyoffer.count le 0) * 100">
					<offervolume min="if $sellcurrentcargo_internal? then 1 else (if $practicalminvolume? then $practicalminvolume else 1)" tradepartner="this.ship"/>
					<match_buyer tradesknownto="this.owner" owner="if $onlyplayerclients then faction.player else null" negateownerfilter="not $onlyplayerclients">
						<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.ship"/>
					</match_buyer>
				</find_buy_offer>
				<do_all exact="$buyoffers.count" counter="$k" reverse="true">
					<do_if value="$buyoffers.{$k}.owner.zone.policefaction and $buyoffers.{$k}.ware.illegalto.{$buyoffers.{$k}.owner.zone.policefaction}.{this.owner} and ($buyoffers.{$k}.owner.zone.policefaction != this.owner)">
						<remove_value name="$buyoffers.{$k}"/>
					</do_if>
				</do_all>
				<!-- Only if there are any  -->
				<do_if value="$buyoffers.count">
					<!-- shuffle list so that offers with the same tradevalue are still in a random order and not in the consistent order that the stations were found in -->
					<shuffle_list list="$buyoffers"/>
					<set_value name="$freespacetable" exact="table[]"/>
					<do_all exact="$buyoffers.count" counter="$k">
						<set_value name="$tempoffer" exact="$buyoffers.{$k}"/>
						<!-- if we found selloffers, we are looking for a buy-sell pair,
                  if there are no selloffers at this point, we are only interested in selling cargo. -->
						<do_if value="$bestselloffers.{$tempoffer.ware}? and $bestselloffers.{$tempoffer.ware}.available">
							<do_if value="not $freespacetable.{$tempoffer.ware}?">
								<set_value name="$freespacetable.{$tempoffer.ware}" exact="this.ship.cargo.{$tempoffer.ware}.free"/>
							</do_if>
							<!-- Sort them by value [least to most worth doing] -->
							<!-- SELLING: tradevalue = amount * (relprice + 2) -->
							<set_value name="$tradevalue" exact="[$tempoffer.offeramount.{this.assignedcontrolled}, $bestselloffers.{$tempoffer.ware}.offeramount.{this.assignedcontrolled}, $freespacetable.{$tempoffer.ware}].min * $tempoffer.ware.volume * ($tempoffer.relativeprice + 2)"/>
						</do_if>
						<do_elseif value="$sellcurrentcargo or $sellcurrentcargo_internal?">
							<!--remove $sellcurrentcargo_internal so it is not attempted again right away-->
							<remove_value name="$sellcurrentcargo_internal"/>
							<!-- SELLING only: tradevalue = amount * (relprice + 2) -->
							<set_value name="$tradevalue" exact="[$tempoffer.offeramount.{this.assignedcontrolled}, this.ship.cargo.{$tempoffer.ware}.count].min * $tempoffer.ware.volume * ($tempoffer.relativeprice + 2)"/>
						</do_elseif>
						<do_else>
							<do_if value="not $freespacetable.{$tempoffer.ware}?">
								<set_value name="$freespacetable.{$tempoffer.ware}" exact="this.ship.cargo.{$tempoffer.ware}.free"/>
							</do_if>
							<!-- SELLING temporarily: tradevalue = amount * (relprice + 2) -->
							<set_value name="$tradevalue" exact="[$tempoffer.offeramount.{this.assignedcontrolled}, this.ship.cargo.{$tempoffer.ware}.count + $freespacetable.{$tempoffer.ware}].min * $tempoffer.ware.volume * ($tempoffer.relativeprice + 2)"/>
						</do_else>
						<do_if value="not $table_buyoffers.{$tradevalue}?">
							<do_if value="$tempoffer.offervolume.{this.assignedcontrolled} lt $minsellvolume">
								<continue/>
							</do_if>
							<set_value name="$table_buyoffers.{$tradevalue}" exact="$tempoffer"/>
						</do_if>
						<remove_value name="$tradevalue"/>
					</do_all>
					<remove_value name="$freespacetable"/>
					<do_if value="$table_buyoffers.keys.count == 0">
						<set_value name="$tradefails" operation="add"/>
						<resume label="fail"/>
					</do_if>
					<set_value name="$list_sortedbuyofferkeys" exact="$table_buyoffers.keys.list"/>
					<set_value name="$tempoffer" exact="$table_buyoffers.{$list_sortedbuyofferkeys.max}"/>
					<create_list name="$spacetradablewares"/>
					<!-- Flag for a new better buy offer -->
					<set_value name="$betteroffer" exact="false"/>
					<!-- Iterate the best offers in this space -->
					<do_all exact="$list_sortedbuyofferkeys.count" counter="$Counter" reverse="true" comment="starting from the last (paying the most)">
						<do_if value="$table_buyoffers.{$list_sortedbuyofferkeys.{$Counter}}.available">
							<set_value name="$tempoffer" exact="$table_buyoffers.{$list_sortedbuyofferkeys.{$Counter}}"/>
							<set_value name="$tempware" exact="$tempoffer.ware"/>
							<!-- keep ONLY the tradable wares for this space -->
							<do_if value="not $spacetradablewares.indexof.{$tempware}">
								<append_to_list name="$spacetradablewares" exact="$tempware"/>
								<!-- keep ALL best offers per ware -->
								<!-- If it's not already on $bestbuyoffers table or the new buy offer has a better trade value (I get more money when I sell) -->
								<!-- NB: tradevalue is (relprice + 2) * amount. $bestvalue at capacity is at minimum relprice. -->
								<do_if value="this.ship.cargo.{$tempware}.exists">
									<set_value name="$bestvalue" exact="[[$minsellvolume, $tempoffer.minvolume, 1].max, this.ship.cargo.{$tempware}.count * $tempware.volume].min"/>
								</do_if>
								<do_else>
									<set_value name="$bestvalue" exact="0"/>
								</do_else>
								<do_if value="@$bestbuyoffers.{$tempware}.available">
									<set_value name="$bestoffer" exact="$bestbuyoffers.{$tempware}"/>
									<set_value name="$bestvalue" exact="[$bestoffer.offeramount.{this.assignedcontrolled}, this.ship.cargo.{$tempware}.free].min * $tempware.volume * ($bestoffer.relativeprice + 2)"/>
								</do_if>
								<do_if value="$list_sortedbuyofferkeys.{$Counter} gt $bestvalue">
									<set_value name="$bestbuyoffers.{$tempware}" exact="$tempoffer"/>
									<set_value name="$betteroffer" exact="true"/>
								</do_if>
								<!-- same number of wanted wares and tradable wares in this space -->
								<do_if value="$filteredwarebasket.count == $spacetradablewares.count">
									<break/>
								</do_if>
							</do_if>
						</do_if>
						<do_else>
							<remove_value name="$table_buyoffers.{$list_sortedbuyofferkeys.{$Counter}}"/>
						</do_else>
					</do_all>
					<remove_value name="$tempoffer"/>
					<remove_value name="$tempware"/>
					<remove_value name="$bestvalue"/>
					<remove_value name="$spacetradablewares"/>
					<!-- At this point $bestbuyoffers has the best offer per ware up to $i space -->
					<wait min="150ms" max="1s" comment="Avoid performance peaks with find functions"/>
					<!-- SELECT a good SELL OFFER and a matching BUY OFFER for it-->
					<!-- If there is a selloffer (something that I want to buy), select the best buy offer (to sell wares) -->
					<do_if value="$bestselloffers.keys.count">
						<!-- Skip this offers because none of them are better -->
						<do_if value="not $betteroffer">
							<continue/>
						</do_if>
						<set_value name="$bestsellofferslist" exact="$bestselloffers.keys.list"/>
						<!-- Try to check all the good sell offers -->
						<do_all exact="$bestsellofferslist.count" counter="$j" reverse="true">
							<!-- Select one good sell offer -->
							<set_value name="$selloffer" exact="$bestselloffers.{$bestsellofferslist.{$j}}"/>
							<do_if value="$selloffer.available">
								<set_value name="$checkoffer" exact="@$bestbuyoffers.{$selloffer.ware}"/>
								<do_if value="@$checkoffer.available">
									<!-- NB: in review for deployment for NPC traders. requires economy analysis. -->
									<do_if value="(not $skippricecheck?) and ($checkoffer.relativeprice le $selloffer.relativeprice)">
										<continue/>
									</do_if>
									<!-- check if there is profit in this trip at all -->
									<set_value name="$checkamount" exact="[this.ship.cargo.{$selloffer.ware}.free, $selloffer.offeramount.{this.assignedcontrolled}, $checkoffer.offeramount.{this.assignedcontrolled}].min"/>
									<!-- If we reach this, a good buyoffer is found -->
									<do_if value="$checkamount">
										<set_value name="$buyoffer" exact="$checkoffer"/>
										<resume label="finish"/>
									</do_if>
									<wait min="150ms" max="1s" comment="Avoid performance peaks with find functions"/>
								</do_if>
								<do_else>
									<remove_value name="$bestbuyoffers.{$selloffer.ware}"/>
								</do_else>
								<remove_value name="$checkoffer"/>
							</do_if>
							<do_else>
								<remove_value name="$bestselloffers.{$bestsellofferslist.{$j}}"/>
							</do_else>
						</do_all>
						<remove_value name="$bestsellofferslist"/>
					</do_if>
					<!-- Sell case ONLY (I sell my cargo) -->
					<!-- No selloffers, I can't buy anything so just sell what I have -->
					<do_elseif value="$bestbuyoffers.keys.count gt 0 and this.ship.cargo.count gt 0">
						<!-- best buy offers -->
						<create_list name="$tempbuyoffers"/>
						<set_value name="$bestbuyofferslist" exact="$bestbuyoffers.keys.list"/>
						<do_all exact="$bestbuyofferslist.count" counter="$i">
							<!-- at this point, we are only looking for trades where we can sell.
                    so we have to have the ware in cargo for the offer to be valid. -->
							<do_if value="$bestbuyoffers.{$bestbuyofferslist.{$i}}.available and this.ship.cargo.{$bestbuyofferslist.{$i}}.exists">
								<append_to_list name="$tempbuyoffers" exact="$bestbuyoffers.{$bestbuyofferslist.{$i}}"/>
							</do_if>
						</do_all>
						<remove_value name="$bestbuyofferslist"/>
						<do_if value="$tempbuyoffers.count">
							<!-- shuffle list so that offers with the same amount are still in a random order and not in the consistent order that the stations were found in -->
							<shuffle_list list="$tempbuyoffers"/>
							<!-- sort trades by amount, from lower to higher amounts -->
							<sort_trades tradelist="$tempbuyoffers" name="$sorted_offers" sorter="amount"/>
							<set_value name="$buyoffer" exact="$sorted_offers.{$sorted_offers.count}"/>
							<remove_value name="$sorted_offers"/>
						</do_if>
						<remove_value name="$tempbuyoffers"/>
						<remove_value name="$minamount"/>
						<!-- if buy offer found (I sell), go to fisnish -->
						<do_if value="$buyoffer.exists">
							<resume label="finish"/>
						</do_if>
					</do_elseif>
				</do_if>
				<wait min="150ms" max="1s" comment="Avoid performance peaks with find functions"/>
			</do_all>
			<!-- If this point is reached, no matching buy offer for the selloffer-->
			<do_if value="$bestselloffers.keys.count">
      </do_if>
			<do_else>
				<set_value name="$tradefails" operation="add"/>
			</do_else>
			<label name="fail"/>
			<do_if value="$sellcurrentcargo_internal? and @$cargoforsale.count">
				<do_for_each name="$locware" in="$cargoforsale" reverse="true">
					<do_if value="not $warebasket.indexof.{$locware}">
						<drop_cargo object="this.assignedcontrolled" ware="$locware" exact="this.assignedcontrolled.cargo.{$locware}.count"/>
					</do_if>
				</do_for_each>
				<remove_value name="$sellcurrentcargo_internal"/>
				<resume label="start"/>
			</do_if>
			<do_if value="this.sector">
				<do_if value="not $anchorpos_sector?">
					<create_position name="$anchorpos_sector" space="this.sector" object="this.ship"/>
				</do_if>
				<set_value name="$idleduration" min="5s" max="10s"/>
				<run_script name="'move.idle'">
					<param name="TimeOut" value="$idleduration"/>
					<param name="anchorpos_sector" value="$anchorpos_sector"/>
				</run_script>
			</do_if>
			<do_else>
				<wait min="10s" max="25s"/>
			</do_else>
			<resume label="start"/>
			<label name="finish"/>
			<return>
				<retval name="buyoffer" value="$buyoffer"/>
				<retval name="selloffer" value="$selloffer"/>
				<retval name="failurereason" value="@$failurereason"/>
			</return>
		</actions>
	</attention>
</aiscript>
