<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="order.trade.routine.daai" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
	<order id="TradeRoutineDAAI" name="{1041, 161}" description="{1041, 162}" category="internal" allowinloop="false">
		<params>
			<param name="warebasket" required="true" default="if @this.ship.warebasket.count then this.ship.warebasket.list else []" type="list" text="{1041, 10146}" comment="Wares">
				<input_param name="type" value="'ware'"/>
				<input_param name="cancarry" value="this.ship"/>
			</param>
			<param name="range" default="if this.ship.jobmainsector then this.ship.jobmainsector else this.sector" type="sector" text="{1041, 10005}" comment="Anchor space"/>
			<param name="minbuy" default="0" type="number" advanced="true" text="{1041, 10066}" comment="Min gate distance to buy. Buy range supported if $minbuy and $maxbuy are provided">
				<input_param name="startvalue" value="0"/>
				<input_param name="min" value="0"/>
				<input_param name="max" value="[(@this.ship.pilot.skill.piloting / 3) - 1, 0].max"/>
				<input_param name="step" value="1"/>
			</param>
			<param name="maxbuy" default="0" type="number" text="{1041, 10054}" comment="Max gate distance to buy. Buy range supported if $minbuy and $maxbuy are provided">
				<input_param name="startvalue" value="0"/>
				<input_param name="min" value="0"/>
				<input_param name="max" value="@this.ship.pilot.skill.piloting / 3"/>
				<input_param name="step" value="1"/>
			</param>
			<param name="minsell" default="0" type="number" advanced="true" text="{1041, 10068}" comment="Min gate distance to sell. Sell range supported if $minsell and $maxsell are provided">
				<input_param name="startvalue" value="0"/>
				<input_param name="min" value="0"/>
				<input_param name="max" value="[(@this.ship.pilot.skill.piloting / 3) - 1, 0].max"/>
				<input_param name="step" value="1"/>
			</param>
			<param name="maxsell" default="0" type="number" text="{1041, 10057}" comment="Max gate distance to sell. Sell range supported if $minsell and $maxsell are provided">
				<input_param name="startvalue" value="0"/>
				<input_param name="min" value="0"/>
				<input_param name="max" value="@this.ship.pilot.skill.piloting / 3"/>
				<input_param name="step" value="1"/>
			</param>
			<param name="duration" default="0s" type="time" infinitevalue="0s" advanced="true" text="{1041, 10034}" comment="Duration">
				<input_param name="startvalue" value="0s"/>
				<input_param name="min" value="0s"/>
				<input_param name="max" value="24h"/>
				<input_param name="step" value="1min"/>
			</param>
			<param name="endtime" default="0s" type="internal" comment="Absolute game time in seconds, after which order will end. Overrides duration. For internal use. Do not use with default orders."/>
			<param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
				<input_param name="truevalue" value="100"/>
			</param>
			<param name="debugchance2" type="bool" default="0" advanced="true" text="{1041, 10142}" comment="Verbose debug output">
				<input_param name="truevalue" value="100"/>
			</param>
		</params>
		<skill min="10"/>
		<requires>
			<match shiptype="shiptype.lasertower" negate="true"/>
		</requires>
	</order>
	<interrupts>
		<handler ref="SectorChangeHandler"/>
		<handler ref="AttackHandler"/>
		<handler ref="MissileLockHandler"/>
		<handler ref="ScannedHandler"/>
		<handler ref="InspectedHandler"/>
		<handler ref="FoundAbandonedHandler"/>
		<handler ref="FoundLockboxHandler"/>
		<handler ref="ResupplyHandler"/>
		<handler ref="TargetInvalidHandler"/>
		<handler ref="TideHandler"/>
	</interrupts>
	<init>
		<set_command command="command.freetrade"/>
		<set_value name="$time_start" exact="player.age"/>
		<set_value name="$thisorder" exact="this.assignedcontrolled.order"/>
		<do_if value="this.assignedcontrolled.hasownaccount and not this.assignedcontrolled.tradeorders.count">
			<remove_object_account object="this.assignedcontrolled" transfer="true"/>
		</do_if>
		<do_if value="$endtime">
			<set_value name="$duration" exact="$endtime - player.age" comment="can be negative"/>
		</do_if>
		<!-- Main action for waiting times -->
		<set_command_action commandaction="commandaction.searchingtrades"/>
	</init>
	<attention min="unknown">
		<actions>
			<do_if value="($minbuy gt 0) and ($minbuy ge $maxbuy)">
				<set_value name="$minbuy" exact="0"/>
			</do_if>
			<do_if value="($minsell gt 0) and ($minsell ge $maxsell)">
				<set_value name="$minsell" exact="0"/>
			</do_if>
			<do_if value="not $warebasket.count">
				<do_if value="(this.assignedcontrolled.job != '') and this.assignedcontrolled.warebasket.count">
					<set_value name="$warebasket" exact="this.assignedcontrolled.warebasket.list"/>
					<do_if value="this.assignedcontrolled.order.$warebasket? and not @this.assignedcontrolled.$warebasket.count">
						<edit_order_param order="this.assignedcontrolled.order" param="'warebasket'" value="$warebasket"/>
					</do_if>
				</do_if>
			</do_if>
			<include_interrupt_actions ref="GetBlacklistgroup"/>
			<do_if value="player.age gt @$next_resupply_check" chance="30">
				<signal_objects object="this.assignedcontrolled" param="'resupply'" param2="[false]" param3="$debugchance" comment="param2 = [urgent?, resupplystationID], param3 = $debugchance"/>
				<set_value name="$next_resupply_check" exact="player.age + 30min"/>
				<wait exact="1s"/>
			</do_if>
			<label name="prep"/>
			<set_value name="$idleduration" min="30s" max="60s"/>
			<do_if value="not $forcelongidle?">
				<set_value name="$idleduration" min="5s" max="10s"/>
			</do_if>
			<remove_value name="$forcelongidle"/>
			<!-- Idle for a while -->
			<run_script name="'move.idle'">
				<param name="TimeOut" value="$idleduration"/>
			</run_script>
			<do_if value="this.assignedcontrolled.iscapitalship and not this.assignedcontrolled.units.{unitcategory.transport}.count">
				<signal_objects object="this.assignedcontrolled" param="'resupply'" param2="[true]" param3="$debugchance" comment="param2 = [urgent?, resupplystationID], param3 = $debugchance"/>
				<wait exact="1s"/>
				<!-- NB: if we're still here, interrupt.restock couldn't find any places to buy transport drones. idle and try again later. -->
				<set_value name="$forcelongidle"/>
				<resume label="prep"/>
			</do_if>
			<!-- set up initial state for trade runs -->
			<label name="start"/>
			<!-- Ranges -->
			<do_if value="$range and not @$range.isclass.space">
				<!-- For jobs, get the string range 'zone', 'sector', 'cluster' -->
				<set_value name="$range" exact="this.assignedcontrolled.{$range}"/>
			</do_if>
			<set_value name="$samebuysellrange" exact="$minsell == $minbuy and $maxsell == $maxbuy"/>
			<run_script name="'lib.find.sectors.inrange'" result="$buyspaces">
				<param name="refobject" value="$range"/>
				<param name="mingatedistance" value="$minbuy"/>
				<param name="maxgatedistance" value="$maxbuy"/>
				<param name="debugchance" value="$debugchance"/>
			</run_script>
			<do_if value="$samebuysellrange">
				<!--The buy and sell ranges are the same, so clone the sectors.inrange results-->
				<set_value name="$sellspaces" exact="$buyspaces.clone"/>
			</do_if>
			<do_if value="not $buyspaces.indexof.{$range} and $range.isclass.sector">
				<append_to_list name="$buyspaces" exact="$range"/>
			</do_if>
			<do_if value="not $samebuysellrange">
				<run_script name="'lib.find.sectors.inrange'" result="$sellspaces">
					<param name="refobject" value="$range"/>
					<param name="mingatedistance" value="$minsell"/>
					<param name="maxgatedistance" value="$maxsell"/>
					<param name="debugchance" value="$debugchance"/>
				</run_script>
			</do_if>
			<do_if value="not $sellspaces.indexof.{$range} and $range.isclass.sector">
				<append_to_list name="$sellspaces" exact="$range"/>
			</do_if>
			<remove_value name="$samebuysellrange"/>
			<do_if value="not $buyspaces.count and not $sellspaces.count">
				<resume label="prep"/>
			</do_if>
			<label name="find trade run"/>
			<do_if value="$duration and ((player.age - $time_start) gt $duration)">
				<resume label="finish"/>
			</do_if>
			<!-- check if this is a jobship at the end of its lifetime -->
			<do_if value="this.assignedcontrolled.jobexpired">
				<create_order object="this.assignedcontrolled" id="'MoveDie'" immediate="true">
					<param name="byhighway" value="not this.assignedcontrolled.isclass.[class.ship_l, class.ship_xl]"/>
				</create_order>
			</do_if>
			<set_value name="$idleduration" min="5s" max="10s"/>
			<!-- Idle for a while -->
			<run_script name="'move.idle'">
				<param name="TimeOut" value="$idleduration"/>
			</run_script>
			<!-- Initializate the results -->
			<set_value name="$buyoffer" exact="null"/>
			<set_value name="$selloffer" exact="null"/>
			<set_value name="$failurereason" exact="null"/>
			<run_script name="'trade.find.free'">
				<param name="warebasket" value="$warebasket"/>
				<param name="range" value="$range"/>
				<param name="sellspaces" value="$sellspaces.clone" comment="pass a copy so it can be modified on the find script"/>
				<param name="buyspaces" value="$buyspaces.clone" comment="pass a copy so it can be modified on the find script"/>
				<param name="debugchance" value="$debugchance"/>
				<param name="debugchance2" value="$debugchance2"/>
				<save_retval name="selloffer" variable="$selloffer"/>
				<save_retval name="buyoffer" variable="$buyoffer"/>
				<save_retval name="failurereason" variable="$failurereason"/>
			</run_script>
			<do_if value="$buyoffer.available and not ($selloffer.available and $selloffer.offeramount.{this.assignedcontrolled}) and not this.assignedcontrolled.cargo.{$buyoffer.ware}.exists">
				<do_if value="@this.assignedcontrolled.order.isrunning">
					<do_if value="not $failurereason">
						<set_value name="$failurereason" exact="{1045, 110}" comment="Buyers found but no matching sellers."/>
						<do_if value="this.assignedcontrolled.hasblacklist.{blacklisttype.sectoractivity}.{$blacklistgroup} or this.assignedcontrolled.hasblacklist.{blacklisttype.sectortravel}.{$blacklistgroup} or this.assignedcontrolled.hasblacklist.{blacklisttype.objectactivity}.{$blacklistgroup}">
							<set_value name="$failurereason" exact="{1045, 111}" comment="Buyers found but no matching sellers in allowed sectors."/>
						</do_if>
					</do_if>
					<set_order_failed order="this.assignedcontrolled.order" text="$failurereason"/>
				</do_if>
				<remove_value name="$failurereason"/>
				<resume label="find trade run"/>
			</do_if>
			<!--If no trade was found then at least fly back to the buy area before checking again-->
			<do_if value="not ($selloffer.available and $selloffer.offeramount.{this.assignedcontrolled}) and not ($buyoffer.available and $buyoffer.offeramount.{this.assignedcontrolled})">
				<do_if value="@this.assignedcontrolled.order.isrunning">
					<do_if value="not $failurereason">
						<set_value name="$failurereason" exact="{1045, 112}" comment="No matching trade offers found."/>
						<do_if value="this.assignedcontrolled.hasblacklist.{blacklisttype.sectoractivity}.{$blacklistgroup} or this.assignedcontrolled.hasblacklist.{blacklisttype.sectortravel}.{$blacklistgroup} or this.assignedcontrolled.hasblacklist.{blacklisttype.objectactivity}.{$blacklistgroup}">
							<set_value name="$failurereason" exact="{1045, 114}" comment="No trades found in allowed sectors."/>
						</do_if>
					</do_if>
					<set_order_failed order="this.assignedcontrolled.order" text="$failurereason"/>
				</do_if>
				<remove_value name="$failurereason"/>
				<!-- Check the buy spaces -->
				<do_if value="$buyspaces.count">
					<set_value name="$moveto" exact="true"/>
					<!--Check if we are already in the buy area-->
					<do_all exact="$buyspaces.count" counter="$Counter">
						<do_if value="this.assignedcontrolled.hascontext.{$buyspaces.{$Counter}}">
							<do_if value="this.assignedcontrolled.distanceto.{this.assignedcontrolled.sector} lt [this.assignedcontrolled.sector.coresize * 1.2f, 200km].min">
								<set_value name="$moveto" exact="false"/>
							</do_if>
							<break/>
						</do_if>
					</do_all>
					<do_if value="$moveto">
						<!-- make sure we don't fly into enemy territory, just because it's technically in the allowed range -->
						<create_list name="$friendly_buyspaces"/>
						<do_all exact="$buyspaces.count" counter="$s">
							<do_if value="$buyspaces.{$s}.isclass.cluster">
								<find_sector name="$friendly_buyspaces" space="$buyspaces.{$s}" multiple="true" append="true">
									<match_relation_to object="this" relation="enemy" negate="true"/>
								</find_sector>
							</do_if>
							<do_elseif value="not $buyspaces.{$s}.owner.hasrelation.enemy.{this}">
								<append_to_list name="$friendly_buyspaces" exact="$buyspaces.{$s}"/>
							</do_elseif>
						</do_all>
						<do_if value="$friendly_buyspaces.count">
							<set_value name="$buyspaceanchor" exact="$friendly_buyspaces.random"/>
						</do_if>
						<do_else>
							<set_value name="$buyspaceanchor" exact="this.sector"/>
						</do_else>
						<remove_value name="$friendly_buyspaces"/>
						<!-- handling for no path not necessary -->
						<run_script name="'move.generic'">
							<param name="destination" value="$buyspaceanchor"/>
							<param name="endintargetzone" value="true"/>
						</run_script>
						<remove_value name="$buyspaceanchor"/>
					</do_if>
					<remove_value name="$moveto"/>
				</do_if>
				<!-- TODO - drop unsellable cargo, if any? -->
				<!-- Restart again -->
				<resume label="find trade run"/>
			</do_if>
			<do_if value="$buyoffer.exists and $selloffer.exists">
			</do_if>
			<do_elseif value="$buyoffer.exists">
			</do_elseif>
			<do_elseif value="$selloffer.exists">
			</do_elseif>
			<do_else>
				<resume label="prep"/>
			</do_else>
			<assert value="not $buyoffer.exists or not $selloffer.exists or ($buyoffer.ware == $selloffer.ware)" text="'Buyoffer ware %s does not match selloffer ware %s. [Nick]'.[$buyoffer.ware, $selloffer.ware]"/>
			<label name="perform trade run"/>
			<set_value name="$isdefaultorder" exact="this.assignedcontrolled.order == this.assignedcontrolled.defaultorder"/>
			<do_if value="@this.assignedcontrolled.order.isrunning">
				<clear_order_failure order="this.assignedcontrolled.order"/>
			</do_if>
			<do_if value="$buyoffer.available">
				<set_value name="$buyoffer_offeramount" exact="$buyoffer.offeramount.{this.assignedcontrolled}"/>
			</do_if>
			<!-- For the selloffer (I buy) -->
			<set_value name="$performbuy" exact="false"/>
			<!-- init buyamount to the $selloffer offeramount. Then we use it to cache the $buyoffer offeramount-->
			<set_value name="$buyamount" exact="if $selloffer.available then $selloffer.offeramount.{this.assignedcontrolled} else 0"/>
			<do_if value="$buyamount">
				<!-- I  want to buy, limit it to the free space for that ware -->
				<clamp_trade_amount trade="$selloffer" amount="$buyamount" buyer="this.assignedcontrolled" seller="$selloffer.seller" result="$amount"/>
				<do_if value="$buyoffer_offeramount?">
					<!-- I want to buy and sell (later), so limit what I want to buy to the future sell amount (buyoffer-amount)
              also need to make sure that the buy offer has not been fully reserved since we found it. -->
					<set_value name="$buyamount" exact="$buyoffer_offeramount"/>
					<set_value name="$amount" exact="[[$buyamount, $amount].min, 0].max"/>
				</do_if>
				<set_value name="$buyamount" exact="$amount"/>
				<do_if value="not $buyamount">
					<remove_value name="$buyoffer_offeramount"/>
					<resume label="find trade run"/>
				</do_if>
				<do_if value="this.assignedcontrolled.cargo.{$selloffer.ware}.exists">
					<set_value name="$buyamount" exact="[$buyamount - this.assignedcontrolled.cargo.{$selloffer.ware}.count, 0].max"/>
				</do_if>
				<do_if value="$buyamount">
					<set_value name="$performbuy" exact="true"/>
				</do_if>
			</do_if>
			<!-- For the buyoffer (I sell) -->
			<set_value name="$performsell" exact="false"/>
			<do_if value="$buyoffer_offeramount?">
				<!-- if we happen to have some of that cargo already, try to sell it along with what we're buying, so add cargo amount to what we will have bought -->
				<set_value name="$sellamount" exact="[$buyamount + this.assignedcontrolled.cargo.{$buyoffer.ware}.count, $buyoffer_offeramount].min"/>
				<do_if value="$sellamount">
					<set_value name="$performsell" exact="true"/>
					<!-- I want to sell after buy, I limit what I want to sell to what I bought+reserverd (selloffer-offer amount of this) -->
					<do_if value="not @$amount">
						<!-- check without setting a seller (it is possible that this doesn't have the wares yet if they still need to be bought) -->
						<clamp_trade_amount trade="$buyoffer" amount="$sellamount" buyer="$buyoffer.buyer" result="$amount"/>
						<!-- limit the max to the capacity since we couldn't specify the seller (this) in clamp_trade_amount -->
						<set_value name="$amount" exact="[[this.assignedcontrolled.cargo.{$buyoffer.ware}.max, $amount].min, 0].max"/>
					</do_if>
					<set_value name="$sellamount" exact="$amount"/>
					<do_if value="not $sellamount">
						<remove_value name="$buyoffer_offeramount"/>
						<resume label="find trade run"/>
					</do_if>
				</do_if>
			</do_if>
			<remove_value name="$buyoffer_offeramount"/>
			<set_order_syncpoint_reached order="this.assignedcontrolled.order"/>
			<!--Queue the sell order first as immediate. It will be displaced by the buy order also being queued as immediate-->
			<do_if value="$performsell">
				<set_value name="$ShipName" exact="this.ship.owner.shortname + ' ' + $buyoffer.ware.name + ' ' + readtext.{1002}.{12032} + ' ' + this.ship.macro.name"/>
				<set_object_name object="this.ship" name="$ShipName"/>
				<create_trade_order name="$sellorder" object="this.object" tradeoffer="$buyoffer" amount="$sellamount" immediate="true" internal="not $blacklist_overridesell?"/>
				<remove_value name="$ShipName"/>
			</do_if>
			<do_if value="$performbuy">
				<do_if value="not $performsell">
					<set_value name="$ShipName" exact="this.ship.owner.shortname + ' ' + $selloffer.ware.name + ' ' + readtext.{1002}.{12032} + ' ' + this.ship.macro.name"/>
					<set_object_name object="this.ship" name="$ShipName"/>
					<remove_value name="$ShipName"/>
				</do_if>
				<create_trade_order name="$buyorder" object="this.object" tradeoffer="$selloffer" amount="$buyamount" immediate="true" internal="not $blacklist_overridebuy?"/>
			</do_if>
			<!-- short wait to prevent this script from doing more actions before it's aborted if trade orders are created.
            if this is an infinite order with orders after it in the order queue, the order will be aborted at this point. -->
			<wait exact="1ms"/>
			<resume label="prep"/>
			<!-- only reachable via resume -->
			<label name="finish"/>
		</actions>
	</attention>
	<on_abort>
		<do_if value="$duration and (@$sellorder or @$buyorder) and @$thisorder.exists">
			<!-- do not reduce duration to 0s since that would make the order infinite. -->
			<edit_order_param order="$thisorder" param="'duration'" value="[$duration - (player.age - $time_start), 1s].max"/>
		</do_if>
	</on_abort>
</aiscript>